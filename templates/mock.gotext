// Auto generated code. DO NOT EDIT.
package mocks

import (
"errors"
"sync"
)

{{range $structName, $struct := .Structs -}}

    type key{{$structName}} struct {
    mux sync.Mutex
    counter int
    }

    func (k *key{{$structName}}) nextKey() int {
    k.mux.Lock()
    defer k.mux.Unlock()
    k.counter++
    return k.counter
    }

    // {{.RepositoryName}}Mock =======================================================
    type {{.RepositoryName}}Mock struct {
    mux     sync.Mutex
    data    map[{{.PrimaryKey.Type}}]*{{$.Package}}.{{.StructName}}

    {{range $k, $nested := $struct.NestedObjects -}}
        {{$nested.ForeignKey.VarName}} map[{{$nested.Object.PrimaryKey.Type}}]*{{$.Package}}.{{$nested.Object.StructName}}
    {{end}}
    }

    var {{$struct.VarName}}Repository *{{.RepositoryName}}Mock
    var keysGenerator{{$structName}} key{{$structName}}

    func New{{.RepositoryName}}(_ {{$.Package}}.Transaction) ({{$.Package}}.{{.RepositoryName}}, error) {
    if {{$struct.VarName}}Repository == nil {
    {{$struct.VarName}}Repository = &{{.RepositoryName}}Mock{
    data: make(map[{{.PrimaryKey.Type}}]*{{$.Package}}.{{.StructName}}),
    {{range $k, $nested := $struct.NestedObjects -}}
        {{$nested.ForeignKey.VarName}}: make(map[{{$nested.Object.PrimaryKey.Type}}]*{{$.Package}}.{{$nested.Object.StructName}}),
    {{end}}
    }
    }
    return {{$struct.VarName}}Repository, nil
    }

    func Clear{{.RepositoryName}}Mock() {
    {{$struct.VarName}}Repository = nil
    }

    func (ar {{.RepositoryName}}Mock) copy({{$struct.VarName}} *{{$.Package}}.{{.StructName}}) *{{$.Package}}.{{.StructName}} {
    return &{{$.Package}}.{{.StructName}}{
    {{range $i, $field := .Fields -}}
        {{$field.Name}}: {{$struct.VarName}}.{{$field.Name}},
    {{end}}
    }
    }

    {{if .NestedObjects -}}
        func (ar {{.RepositoryName}}Mock) updateNestedObjects({{.VarName}} *{{$.Package}}.{{.StructName}}) error {
        var err error
        {{range $k, $nested := $struct.NestedObjects -}}
            {{if $nested.ForeignKey.IsArray -}}
                for _, item := range {{$struct.VarName}}.{{$nested.ForeignKey.Name}} {
                _, err = ar.createOrUpdate{{$nested.Object.StructName}}(item)
                if err != nil {
                return err
                }
                }
            {{else -}}
                _, err = ar.createOrUpdate{{$nested.Object.StructName}}({{$struct.VarName}}.{{$nested.ForeignKey.Name}})
                if err != nil {
                return err
                }
            {{end -}}
        {{end -}}
        return nil
        }
    {{end}}

    func (ar *{{.RepositoryName}}Mock) Create({{$struct.VarName}} *{{$.Package}}.{{.StructName}}) ({{.PrimaryKey.Type}}, error) {
    ar.mux.Lock()
    defer ar.mux.Unlock()

    newItem := ar.copy({{$struct.VarName}})

    if {{$struct.VarName}}.{{.PrimaryKey.Name}} == nil {
    newKey := keysGenerator{{$structName}}.nextKey()
    newItem.{{.PrimaryKey.Name}} = &newKey
    }

    if item, ok := ar.data[*newItem.{{.PrimaryKey.Name}}]; ok {
    return *item.{{.PrimaryKey.Name}}, errors.New("record already exists")
    }

    ar.data[*newItem.{{.PrimaryKey.Name}}] = newItem

    {{if .NestedObjects -}}
        err := ar.updateNestedObjects({{$struct.VarName}})
        if err != nil {
        return *newItem.{{.PrimaryKey.Name}}, err
        }
    {{end}}

    return *newItem.{{.PrimaryKey.Name}}, nil
    }

    func (ar *{{.RepositoryName}}Mock) Update({{$struct.VarName}} *{{$.Package}}.{{.StructName}}) error {
    ar.mux.Lock()
    defer ar.mux.Unlock()
    if _, ok := ar.data[*{{$struct.VarName}}.{{.PrimaryKey.Name}}];!ok {
    return errors.New("record not found")
    }
    ar.data[*{{$struct.VarName}}.{{.PrimaryKey.Name}}] = {{$struct.VarName}}

    {{if .NestedObjects -}}
        err := ar.updateNestedObjects({{$struct.VarName}})
        if err != nil {
        return err
        }
    {{end}}

    return nil
    }

    {{range $i, $field := .Fields -}}

        {{if $field.Tag.IsPrimary -}}
            {{if gt (len $struct.Active.SQLCondition) 0 -}}
                func (ar *{{$struct.RepositoryName}}Mock) FindRawBy{{$field.Name}}({{$field.VarName}} {{$field.FullType}}) (*{{$.Package}}.{{$struct.StructName}}, error) {
                ar.mux.Lock()
                defer ar.mux.Unlock()
                if item, ok := ar.data[{{$field.VarName}}]; ok {
                return ar.copy(item), nil
                }
                return nil, nil
                }
            {{end}}

            func (ar *{{$struct.RepositoryName}}Mock) FindBy{{$field.Name}}({{$field.VarName}} {{$field.FullType}}) (*{{$.Package}}.{{$struct.StructName}}, error) {
            ar.mux.Lock()
            defer ar.mux.Unlock()
            if item, ok := ar.data[{{$field.VarName}}]; ok {{if gt (len $struct.Active.MethodName) 0 -}}&& item.{{$struct.Active.MethodName -}}(){{end -}} {
            return ar.copy(item), nil
            }
            return nil, nil
            }
        {{end -}}

        {{if $field.Tag.IsSearchable -}}
            func (ar *{{$struct.RepositoryName}}Mock) FindBy{{$field.Name}}({{$field.VarName}} {{$field.FullType}}) ([]*{{$.Package}}.{{$struct.StructName}}, error) {
            ar.mux.Lock()
            defer ar.mux.Unlock()
            var filtered []*{{$.Package}}.{{$struct.StructName}}

            for _, item := range ar.data {
            if {{if $field.IsPointer}} item.{{$field.Name}}!=nil && {{end -}}
            {{if $field.IsPointer}}*{{end}}item.{{$field.Name}} == {{$field.VarName -}} {{if gt (len $struct.Active.MethodName) 0}} && item.{{$struct.Active.MethodName -}}(){{end -}}{
            filtered = append(filtered, ar.copy(item))
            }
            }
            return filtered, nil
            }
        {{end -}}

        {{if and $field.IsPointer (eq $field.Type "time.Time") -}}
            func (ar *{{$struct.RepositoryName}}Mock) Mark{{$field.Name}}({{$struct.PrimaryKey.VarName}} {{$struct.PrimaryKey.Type}}) error {
            ar.mux.Lock()
            defer ar.mux.Unlock()
            if item, ok := ar.data[{{$struct.PrimaryKey.VarName}}];ok {
            now := time.Now()
            item.{{$field.Name}} = &now
            }
            return nil
            }
        {{end}}
    {{end -}}

    {{range $groupName, $groupFields := .SearchGroups -}}
        func (ar *{{$struct.RepositoryName}}Mock) FindBy{{$groupName}}({{range $i, $field := $groupFields -}}
            {{if gt $i 0}}, {{end -}}
            {{$field.VarName}} {{$field.Type -}}
        {{end -}}) ([]*{{$.Package}}.{{$struct.StructName}}, error) {
        ar.mux.Lock()
        defer ar.mux.Unlock()
        var filtered []*{{$.Package}}.{{$struct.StructName}}

        for _, item := range ar.data {
        if {{range $i, $field := $groupFields -}} {{if gt $i 0}}&&{{end}} {{if $field.IsPointer}} item.{{$field.Name}}!=nil && {{end}}
        {{if $field.IsPointer}}*{{end}}item.{{$field.Name}} == {{$field.VarName}} {{end -}}
        {{if gt (len $struct.Active.MethodName) 0 -}}&& item.{{$struct.Active.MethodName -}}(){{end -}}{
        filtered = append(filtered, item)
        }
        }
        return filtered, nil
        }
    {{end}}

    {{- /* Nested objects*/ -}}
    {{if $struct.NestedObjects}}
        {{range $k, $nested := $struct.NestedObjects -}}
            // Nested {{$nested.ForeignKey.Name}} =======================================================
            func (ar {{$struct.RepositoryName}}Mock) createOrUpdate{{$nested.Object.StructName}}({{$nested.Object.VarName}} *{{$.Package}}.{{$nested.Object.StructName}}) ({{$nested.Object.PrimaryKey.Type}}, error) {
            newItem := ar.copy{{$nested.Object.StructName}}({{$nested.Object.VarName}})

            if {{$nested.Object.VarName}}.{{$nested.Object.PrimaryKey.Name}} == nil {
            newKey := keysGenerator{{$structName}}.nextKey()
            newItem.{{$nested.Object.PrimaryKey.Name}} = &newKey
            }

            ar.{{$nested.ForeignKey.VarName}}[*newItem.{{$nested.Object.PrimaryKey.Name}}] = newItem
            return *newItem.{{$nested.Object.PrimaryKey.Name}}, nil
            }

            func (ar {{$struct.RepositoryName}}Mock) copy{{$nested.Object.StructName}}({{$nested.Object.VarName}} *{{$.Package}}.{{$nested.Object.StructName}}) *{{$.Package}}.{{$nested.Object.StructName}} {
            return &{{$.Package}}.{{$nested.Object.StructName}}{
            {{range $i, $field := $nested.Object.Fields -}}
                {{$field.Name}}: {{$nested.Object.VarName}}.{{$field.Name}},
            {{end}}
            }
            }

            func (ar {{$struct.RepositoryName}}Mock) Load{{$nested.ForeignKey.Name}}({{$struct.VarName}} *{{$.Package}}.{{$structName}}) error {
            ar.mux.Lock()
            defer ar.mux.Unlock()
            {{if $nested.ForeignKey.IsArray -}}
                for _, item := range ar.{{$nested.ForeignKey.VarName}} {
                if *item.{{$nested.ForeignKey.ForeignName}} == *{{$struct.VarName}}.{{$struct.PrimaryKey.Name}} {
                {{$struct.VarName}}.{{$nested.ForeignKey.Name}} = append({{$struct.VarName}}.{{$nested.ForeignKey.Name}}, item)
                }
                }
            {{else -}}
                for _, item := range ar.{{$nested.ForeignKey.VarName}} {
                if (*item.{{$nested.ForeignKey.ForeignName}} == *{{$struct.VarName}}.{{$struct.PrimaryKey.Name}}) {
                {{$struct.VarName}}.{{$nested.ForeignKey.Name}} = item
                break
                }
                }
            {{end -}}

            return nil
            }

            {{range $i, $field := $nested.Object.Fields}}
                {{- /* Search methods */ -}}
                {{if $field.Tag.IsSearchable}}
                    func (ar {{$struct.RepositoryName}}Mock) FindBy{{$nested.ForeignKey.Name}}{{$field.Name}}({{$field.VarName}} {{$field.FullType}}) ([]*{{$.Package}}.{{$struct.StructName}}, error) {
                    ar.mux.Lock()
                    defer ar.mux.Unlock()
                    var filtered []*{{$.Package}}.{{$struct.StructName}}

                    for _, item := range ar.{{$nested.ForeignKey.VarName}} {
                    if {{if $field.IsPointer}} item.{{$field.Name}}!=nil && {{end -}}
                    {{if $field.IsPointer}}*{{end}}item.{{$field.Name}} == {{$field.VarName -}} {{if gt (len $nested.Object.Active.MethodName) 0}} && item.{{$nested.Object.Active.MethodName -}}(){{end -}}{
                    if foundItem, ok := ar.data[*item.{{$nested.ForeignKey.ForeignName}}]; ok {
                    {{if gt (len $nested.Object.Active.MethodName) 0 -}}
                        if !foundItem.{{$nested.Object.Active.MethodName -}}() {
                        break
                        }
                    {{end -}}
                    filtered = append(filtered, ar.copy(foundItem))
                    }
                    }
                    }
                    return filtered, nil
                    }
                {{- end -}}
            {{- end}}


            {{/* Search by group of fields methods */}}
            {{- range $groupName, $groupFields := $nested.Object.SearchGroups -}}
                func (ar {{$struct.RepositoryName}}Mock) FindBy{{$nested.ForeignKey.Name}}{{$groupName}}({{range $i, $field := $groupFields -}}
                    {{if gt $i 0}}, {{end -}}
                    {{$field.VarName}} {{$field.Type -}}
                {{end}}) ([]*{{$.Package}}.{{$struct.StructName -}}, error) {
                ar.mux.Lock()
                defer ar.mux.Unlock()
                var filtered []*{{$.Package}}.{{$struct.StructName}}

                for _, item := range ar.{{$nested.ForeignKey.VarName}} {
                if {{range $i, $field := $groupFields -}} {{if gt $i 0}}&&{{end}} {{if $field.IsPointer}} item.{{$field.Name}}!=nil && {{end}}
                {{if $field.IsPointer}}*{{end}}item.{{$field.Name}} == {{$field.VarName}} {{end -}}
                {{if gt (len $nested.Object.Active.MethodName) 0 -}}&& item.{{$nested.Object.Active.MethodName -}}(){{end -}}{
                if foundItem, ok := ar.data[*item.{{$nested.ForeignKey.ForeignName}}]; ok {
                filtered = append(filtered, ar.copy(foundItem))
                }
                }
                }
                return filtered, nil
                }
            {{end -}}

        {{end}}{{end -}}

{{end}}
